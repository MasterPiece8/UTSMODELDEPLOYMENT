# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hTCBwhd0nkD-0YII82CGkHD9vUHAGKKd
"""

!pip install -q streamlit

import streamlit as st
import pickle
import xgboost as xgb
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

class XGBoostTrainer:
    def __init__(self, n_estimators=50, random_state=42, scale_pos_weight=1):
        self.model = xgb.XGBClassifier(
            n_estimators=n_estimators,
            use_label_encoder=False,
            eval_metric='logloss',
            random_state=random_state,
            scale_pos_weight=scale_pos_weight
        )
        self.feature_names = None

    def train(self, X_train, y_train):
        self.model.fit(X_train, y_train)
        self.feature_names = X_train.columns.tolist()

    def evaluate(self, X_test, y_test):
        y_pred = self.model.predict(X_test)
        acc = accuracy_score(y_test, y_pred)
        matrix = confusion_matrix(y_test, y_pred)
        report = classification_report(y_test, y_pred, output_dict=True)
        return acc, matrix, report

    def save_model(self, filename="xgboost_best_model.pkl"):
        with open(filename, "wb") as f:
            pickle.dump({
                'model': self.model,
                'feature_names': self.feature_names
            }, f)

    def load_model(self, filename="xgboost_best_model.pkl"):
        with open(filename, "rb") as f:
            data = pickle.load(f)

            if isinstance(data, dict) and 'model' in data:
                self.model = data['model']
                self.feature_names = data.get('feature_names', None)
            else:
                self.model = data
                self.feature_names = None  # harus set manual nanti

    def set_feature_names(self, feature_names):
        self.feature_names = feature_names

    def predict_input(self, input_dict):
        if self.feature_names is None:
            raise ValueError("Feature names belum diset.")

        df = pd.DataFrame(columns=self.feature_names)
        df.loc[0] = [0.0] * len(df.columns)

        for key, val in input_dict.items():
            if key in df.columns:
                df.at[0, key] = val

        prediction = self.model.predict(df)[0]
        probability = self.model.predict_proba(df)[0]

        return {
            "prediction": int(prediction),
            "status": "DITERIMA" if prediction == 1 else "DITOLAK",
            "probability": {
                "class_0 (DITOLAK)": round(float(probability[0]), 3),
                "class_1 (DITERIMA)": round(float(probability[1]), 3)
            }
        }

trainer = XGBoostTrainer(scale_pos_weight=3.5)
trainer.load_model("xgboost_best_model.pkl")

# Kalau pakai file model lama (tanpa feature_names)
if trainer.feature_names is None:
    trainer.set_feature_names([
        'person_age',
        'person_income',
        'person_emp_exp',
        'loan_amnt',
        'loan_int_rate',
        'loan_percent_income',
        'cb_person_cred_hist_length',
        'credit_score',
        'person_gender_fe male',
        'person_gender_female',
        'person_gender_male',
        'person_education_Bachelor',
        'person_education_Doctorate',
        'person_education_High School',
        'person_education_Master',
        'person_home_ownership_OTHER',
        'person_home_ownership_OWN',
        'person_home_ownership_RENT',
        'loan_intent_EDUCATION',
        'loan_intent_HOMEIMPROVEMENT',
        'loan_intent_MEDICAL',
        'loan_intent_PERSONAL',
        'loan_intent_VENTURE',
        'previous_loan_defaults_on_file_Yes',
        'loan_to_income',
        'income_per_year_exp',
        'is_young'
    ])

if __name__ == "__main__":
    st.title("Loan Approval Prediction")

    person_age = st.number_input("Age", min_value=18, max_value=100, value=25)
    person_income = st.number_input("Annual Income", min_value=0, value=50000)
    person_emp_exp = st.number_input("Years of Work Experience", min_value=0, value=5)
    loan_amnt = st.number_input("Loan Amount", min_value=0, value=10000)
    loan_int_rate = st.number_input("Loan Interest Rate (%)", min_value=0.0, value=12.5)
    cb_person_cred_hist_length = st.number_input("Credit History Length", min_value=0, value=5)
    credit_score = st.slider("Credit Score", 300, 850, 700)

    loan_intent = st.selectbox("Loan Intent", ["NONE", "EDUCATION", "PERSONAL", "MEDICAL", "HOMEIMPROVEMENT", "VENTURE"])
    home_ownership = st.selectbox("Home Ownership", ["RENT", "OWN", "OTHER"])
    default_status = st.selectbox("Previous Loan Defaults on File", ["Yes", "No"])

    if st.button("Predict"):
        loan_percent_income = loan_amnt / (person_income + 1e-5)
        income_per_year_exp = person_income / (person_emp_exp + 1e-5)



        user_input = {
            'person_age': person_age,
            'person_income': person_income,
            'person_emp_exp': person_emp_exp,
            'loan_amnt': loan_amnt,
            'loan_int_rate': loan_int_rate,
            'loan_percent_income': loan_percent_income,
            'cb_person_cred_hist_length': cb_person_cred_hist_length,
            'credit_score': credit_score,
            'person_gender_male': 1,
            'person_gender_female': 0,
            'person_education_Bachelor': 1,
            'person_education_High School': 0,
            'person_education_Master': 0,
            'person_education_Doctorate': 0,
            'person_home_ownership_RENT': int(home_ownership == "RENT"),
            'person_home_ownership_OWN': int(home_ownership == "OWN"),
            'person_home_ownership_OTHER': int(home_ownership == "OTHER"),
            'loan_intent_EDUCATION': int(loan_intent == "EDUCATION"),
            'loan_intent_PERSONAL': int(loan_intent in ["PERSONAL", "NONE"]),
            'loan_intent_HOMEIMPROVEMENT': int(loan_intent == "HOMEIMPROVEMENT"),
            'loan_intent_MEDICAL': int(loan_intent == "MEDICAL"),
            'loan_intent_VENTURE': int(loan_intent == "VENTURE"),
            'previous_loan_defaults_on_file_Yes': int(default_status == "Yes"),
            'previous_loan_defaults_on_file_No': int(default_status == "No"),
            'loan_to_income': loan_percent_income,
            'income_per_year_exp': income_per_year_exp,
            'is_young': int(person_age < 25)
        }

        df = pd.DataFrame(columns=trainer.feature_names)
        df.loc[0] = [0.0] * len(df.columns)
        for key, val in user_input.items():
            if key in df.columns:
                df.at[0, key] = val

        prediction = trainer.model.predict(df)[0]
        status = "Approved" if prediction == 1 else "Rejected"
        st.success(f"The prediction is: {status}")

        st.subheader("Debugging Info")
        st.write("✅ User Input Dictionary:")
        st.write(user_input)

        st.write("✅ Probabilitas Kelas:")
        proba = trainer.model.predict_proba(df)[0]